{"version":3,"file":"bundle.js","sources":["../baseType.ts","../index.ts"],"sourcesContent":["const baseType = function () {\n    //基本类型：string number boolean\n    const name: string = 'zz';\n    const age: number = 20;\n    const isMale: boolean = false;\n\n\n    //类型推导：这里ts会推导类型\n    let gender = 'female';\n    // gender = 1; //gender被推导为string类型，此处类型不对\n    console.log(name, age);\n\n\n    // 父子关系：子集可以赋值给父集\n    let s1: string = 'a';\n    // let s2: string = new String('a');//new String是class类型，不能赋值给string类型\n    let s3: String = '1';//子集可以赋值给父集\n    let s4: String = new String('1');\n\n    //数组\n    //强类型中，数组中元素的类型需要一致，但js可以随意\n    let arr1: number[] = [1, 2, 3];\n    let arr2: Array<number> = [1, 2, 3];//泛型方式\n    let arr3: (number | string)[] = [1, '1'];//使用联合类型，实现数组元素可以有多种类型\n    // arr3.push(true);//报类型错误\n\n\n    //元组 tuple\n    //元组与数组的区别是，元组限制了特定位置的类型，顺序、位置和数量都必须与类型定义一致\n    let tuple1: [string, number] = ['1', 1]\n    // let tuple2: [string, number] = ['1'];//数量不对\n    // let tuple3: [string, number] = [2, 1];//类型不对\n    //可以增加string, number类型的元素，但是访问时会报错\n    tuple1.push(2);\n    // tuple1[2];//Tuple type '[string, number]' of length '2' has no element at index '2'\n    console.log('tuple', tuple1);\n\n\n    // enum 枚举，自带类型的对象，维护一组常量\n    // 约定一组格式：状态码 权限 数据格式 标志位\n    // 枚举内的值，默认从0开始递增；可以赋予其他值，后面的变量值默认是上一个值加1\n    // （异构枚举）如果上一个值不是数字，那需要重新给当前变量初始化一个值\n    enum STATUS1 {\n        'OK',\n        'NO_OK',\n    };\n    enum STATUS2 {\n        'OK' = 2,\n        'NO_OK',\n    };\n    enum STATUS3 {\n        'OK',\n        'NO_OK' = 'no_ok',\n        'NOT_FOUND' = 2\n    };\n    // 上面几个枚举会被编译成对象\n    // 但常量枚举不会被编译成对象，rollup在编译时，只会把用到的枚举值直接取出\n    // 常量枚举更常用，更加节省空间\n    const enum STATUS4 {\n        'OK',\n        'NO_OK',\n        'NOT_FOUND'\n    }\n    const r = STATUS4['OK'];\n    console.log(r);\n\n\n    // null undefined\n    // tsconfig.json中\"strictNullChecks\"设置为false时，null undefined类型可以赋值给任何类型\n    const u: undefined = undefined;\n    const n: null = null;\n\n\n\n    // void 空类型 一般表示函数的返回值\n    // undefined可以赋值给void（undefined是void的子类型）\n    function a(): void {\n        // return undefined;\n        return;\n    }\n\n\n    // never 永远达到不了的地方\n    function whileTrue(): never {\n        while (true) { }//函数无法达到执行完毕的状态\n    }\n    function throwError(): never {\n        throw Error();//出错无法执行完毕\n    }\n    //如果if/else条件都走完了，没有遗漏的，后面的类型就是never（完整性保护）\n    // 111 [1,1,1]\n    // '111' ['1','1','1']\n    // true ['t','r','u','e']\n    function toArray(val: number | string | boolean) {\n        if (typeof val === 'number') {\n            return val.toString().split('').map(Number)\n        }\n        if (typeof val === 'string') {\n            return val.split('')\n        }\n        if (typeof val === 'boolean') {\n            return val.toString().split('')\n        }\n        //如果上述条件没有枚举玩，这里会报错\n        const n: never = val;\n        // 可以改为一个校验方法\n        validateCheck(val);//代码的完整性保护\n    }\n    function validateCheck(v: never) { }\n\n\n    // any 任何类型，只在迫不得已的情况下用，会导致类型检测丧失\n    let a1: any = 1;\n    a1 = '1';\n\n    //unknown 未知类型\n\n    //object 引用类型\n    function create(val: object) { }\n    create({});\n    create([]);\n    create(function () { });\n    // create(1);//报错\n\n\n    // symbol bigInt\n    const s: symbol = Symbol();\n    const b = BigInt(1);//需要把target改为\"ES2020\"之后，或者添加lib: [\"ES2020\", \"DOM\"]，（console.log属于DOM）\n\n\n}\nexport default baseType","import baseType from './baseType';\n\nbaseType()"],"names":[],"mappings":";;;IAAA,MAAM,QAAQ,GAAG,YAAA;;QAEb,MAAM,IAAI,GAAW,IAAI;QACzB,MAAM,GAAG,GAAW,EAAE;;IAOtB,IAAA,OAAO,CAAC,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC;;;;IAmBtB,IAAA,IAAI,MAAM,GAAqB,CAAC,GAAG,EAAE,CAAC,CAAC;;;;IAIvC,IAAA,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;;IAEd,IAAA,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,MAAM,CAAC;;;;;IAO5B,IAAA,IAAK,OAGJ;IAHD,IAAA,CAAA,UAAK,OAAO,EAAA;IACR,QAAA,OAAA,CAAA,OAAA,CAAA,IAAA,CAAA,GAAA,CAAA,CAAA,GAAA,IAAI;IACJ,QAAA,OAAA,CAAA,OAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA,GAAA,OAAO;IACX,KAAC,EAHI,OAAO,KAAP,OAAO,GAGX,EAAA,CAAA,CAAA;IACD,IAAA,IAAK,OAGJ;IAHD,IAAA,CAAA,UAAK,OAAO,EAAA;IACR,QAAA,OAAA,CAAA,OAAA,CAAA,IAAA,CAAA,GAAA,CAAA,CAAA,GAAA,IAAQ;IACR,QAAA,OAAA,CAAA,OAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA,GAAA,OAAO;IACX,KAAC,EAHI,OAAO,KAAP,OAAO,GAGX,EAAA,CAAA,CAAA;IACD,IAAA,IAAK,OAIJ;IAJD,IAAA,CAAA,UAAK,OAAO,EAAA;IACR,QAAA,OAAA,CAAA,OAAA,CAAA,IAAA,CAAA,GAAA,CAAA,CAAA,GAAA,IAAI;IACJ,QAAA,OAAA,CAAA,OAAA,CAAA,GAAA,OAAiB;IACjB,QAAA,OAAA,CAAA,OAAA,CAAA,WAAA,CAAA,GAAA,CAAA,CAAA,GAAA,WAAe;IACnB,KAAC,EAJI,OAAO,KAAP,OAAO,GAIX,EAAA,CAAA,CAAA;QASD,MAAM,CAAC;IACP,IAAA,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;QA+DJ,MAAM,CAAC,CAAC,EAAE;IAGxB,CAAC;;IChID,QAAQ,EAAE;;;;;;"}